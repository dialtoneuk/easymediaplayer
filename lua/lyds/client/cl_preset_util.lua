
--returns a string
function MediaPlayer.PackDefaultPresets()
	local tab = {}
	local str = "MediaPlayerPresets = {\n"

	if (!file.IsDir("data/presets/", "thirdparty")) then
		warning("data/presets/ not found in addon directory")
		return
	end

	local files = file.Find("data/presets/*.json", "thirdparty")

	for k,v in pairs(files) do

		v = string.Replace(v, " ", "_")

		local t = util.JSONToTable(file.Read("data/presets/" .. v , "thirdparty"))

		if (t == nil ) then
			error("bad json in " .. v .. ".json")
		end

		t.Locked = true
		tab[ v ] = t
	end

	for k,v in pairs(tab) do
		str = str .. string.format("\t['%s'] = [[%s]],\n", k, util.TableToJSON(v) )
	end

	str = str .. "}"

	return str
end

--saves ap reset to file
function MediaPlayer.SavePreset(filename, preset)

	if (preset.Settings == nil ) then error("bad preset") end

	for k,v in pairs(preset.Settings) do

		if (type(v) == "table") then

			local set = MediaPlayer.GetSetting(k).DefValue
			for key,val in pairs(v) do

				if (set.__pack != nil and string.sub(key, 1, 2) != "__" ) then
					v[key] = set.__pack(v[key], key, val )
				end

				if (string.sub(key, 1, 2) == "__") then
					v[key] = nil
					continue
				end
			end
		end
	end

	filename = string.Replace(filename, ".json", "")
	file.Write("lyds/presets/" .. filename .. ".json", util.TableToJSON(preset) )
end

--applies a preset
function MediaPlayer.ApplyPreset(preset)

	if (preset.Settings == nil ) then error("bad preset") end

	for k,v in pairs(preset.Settings) do

		if (type(v) == "table") then

			local set = MediaPlayer.GetSetting(k).DefValue

			--loop the default values as these assure all settings a present (incase presets are older)
			for key,val in pairs(v) do

				--it isnt set in this aray
				if (v[key] == nil ) then
					v[key] = set[key]
				end

				if (set.__unpack != nil and string.sub(key, 1, 2) != "__" ) then
					v[key] = set.__unpack(v[key], key, val )
				end

				if (string.sub(key, 1, 2) == "__") then
					v[key] = nil
					continue
				end
			end

			for _k,_v in pairs(set) do
				if (v[_k] == nil and string.sub(_k, 1, 2) != "__" ) then
					v[_k] = table.Copy(set)[_k]
				end
			end

			MediaPlayer.ChangeSetting(k, table.Copy(v))
		else
			MediaPlayer.ChangeSetting(k, v)
		end
	end
end

--applys the default preset
function MediaPlayer.ApplyDefaultPreset()

	if (!file.Exists("lyds/presets/default.json","DATA") ) then
		return
	end

	local tab = util.JSONToTable(file.Read("lyds/presets/default.json"))

	if (tab == nil) then
		error("default preset is invalid")
	end

	MediaPlayer.ApplyPreset(tab)
	MediaPlayer.InstantiatePanels(true)
end

--writes default presets to file
function MediaPlayer.WriteDefaultPresets()

	local files = MediaPlayer.GetPackedPresets()

	if (table.IsEmpty(files)) then
		print("no files found")
		return
	end

	for k,v in pairs(files) do
		if (file.Exists("lyds/presets/" .. k, "DATA" )) then print(k .. " already exists in folder")  continue end
		if (!file.IsDir("lyds/presets/", "DATA")) then file.CreateDir("lyds/presets/") end

		print("writing default preset file " .. k .. " into data/lyds/presets")
		file.Write("lyds/presets/" .. k, v)
	end
end

--used in the creation of the default assets payload
function MediaPlayer.PrintDefaultPresets()

	if (!file.IsDir("lyds/", "DATA")) then file.CreateDir("lyds/") end

	local str = MediaPlayer.PackDefaultPresets()
	str = "--autogenerated " .. util.DateStamp() .. "\n\n" .. str

	file.Write("lyds/default_presets.txt", str)

	print("Success!")
	print("-- open garrysmod/garrysmod/data/lyds/default_presets.txt for output")
	print("-- copy content of .txt into garrysmod/addons/<addon_name>/lua/autorun/presets.lua")
end

--returns either the defined global or an empty table
function MediaPlayer.GetPackedPresets()

	--this global is loaded from autorun
	if ( MediaPlayerPresets == nil or table.IsEmpty(MediaPlayerPresets )) then
		return {}
	end

	return MediaPlayerPresets;
end

--requests the initial default preset from the server
function MediaPlayer.GetDefaultPreset()

	net.Start("MediaPlayer.GetDefaultPreset")
	net.SendToServer()
end

--Refreses the default preset, must be an admin to call this
function MediaPlayer.RefreshDefaultPreset()

	if (!MediaPlayer.LocalPlayer:IsAdmin()) then return end

	net.Start("MediaPlayer.AdminRefreshDefaultPreset")
	net.SendToServer()
end

--Request default preset from the server if we've only joined once
function MediaPlayer.RequestDefaultPreset()

	net.Start("MediaPlayer.RequestDefaultPreset")
	net.SendToServer()
end

--applies the initial preset sent to us by the server
function MediaPlayer.SendPresetToServer(preset)

	if (!MediaPlayer.LocalPlayer:IsAdmin()) then return end

	if (table.IsEmpty(preset) or preset.Settings == nil ) then
		error("bad preset")
	end

	for k,v in pairs(preset.Settings) do

		if (type(v) == "table") then

			local set = MediaPlayer.GetSetting(k).DefValue
			for key,val in pairs(v) do

				if (set.__pack != nil and string.sub(key, 1, 2) != "__" ) then
					v[key] = set.__pack(v[key], key, val )
				end

				if (string.sub(key, 1, 2) == "__") then
					v[key] = nil
					continue
				end
			end
		end
	end

	print("sending initial preset to server")
	net.Start("MediaPlayer.SendPresetToServer")
		net.WriteTable(preset)
	net.SendToServer()
end